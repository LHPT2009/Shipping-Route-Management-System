version: '3.8'

name: backend

services:

  # # Zookeeper
  # zookeeper:
  #   image: 'docker.io/bitnami/zookeeper:3-debian-10'
  #   ports:
  #     - 2181:2181
  #   environment:
  #     - ALLOW_ANONYMOUS_LOGIN=yes
  #   networks:
  #     - backend

  # # Kafka
  # kafka:
  #   container_name: kafka
  #   image: 'docker.io/bitnami/kafka:2-debian-10'
  #   ports:
  #     - 9092:9092
  #     - 9093:9093
  #   environment:
  #     - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
  #     - ALLOW_PLAINTEXT_LISTENER=yes
  #     - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
  #     - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
  #     - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
  #     - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://kafka:9093
  #     - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
  #   depends_on:
  #     - zookeeper
  #   networks:
  #     - backend
  #   healthcheck:
  #     test:
  #       [
  #         "CMD-SHELL",
  #         "echo 'test-message' | kafka-console-producer.sh --broker-list localhost:9092 --topic health-check-topic && kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic health-check-topic --from-beginning --max-messages 1 | grep 'test-message'"
  #       ]
  #     interval: 15s
  #     timeout: 10s
  #     retries: 3

  # # Kafka UI
  # kafka-ui:
  #   container_name: kafka-ui
  #   image: provectuslabs/kafka-ui:latest
  #   ports:
  #     - 8080:8080
  #   environment:
  #     DYNAMIC_CONFIG_ENABLED: true
  #   # volumes:
  #   #   - ~/kui/config.yml:/etc/kafkaui/dynamic_config.yaml

  # Postgres
  postgres:
    container_name: postgres
    image: postgres:alpine
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./docker-utils:/docker-entrypoint-initdb.d
      - ./postgresdb:/var/lib/postgresql/data
    ports:
      - 5432:${POSTGRES_PORT}
    restart: always
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - backend

  # # Auth service
  # auth_service:
  #   container_name: auth_service
  #   build: .
  #   command: sh -c "npm run start:dev auth"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #       restart: true
  #     # kafka:
  #     #   condition: service_healthy
  #     #   restart: true
  #   ports:
  #     - ${AUTH_PORT}:${AUTH_PORT}
  #     - 50051:50051
  #   healthcheck:
  #     test:
  #       [
  #         'CMD',
  #         'wget',
  #         '--quiet',
  #         '--tries=1',
  #         '--spider',
  #         'http://localhost:5010/health'
  #       ]
  #     interval: 10s
  #     retries: 5
  #     start_period: 30s
  #     timeout: 10s
  #   volumes:
  #     - .:/usr/app
  #   networks:
  #     - backend

  # # Route service
  # route_service:
  #   container_name: route_service
  #   build: .
  #   command: sh -c "npm run start:dev route"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #       restart: true
  #     auth_service:
  #       condition: service_healthy
  #       restart: true
  #   ports:
  #     - ${ROUTE_PORT}:${ROUTE_PORT}
  #   healthcheck:
  #     test:
  #       [
  #         'CMD',
  #         'wget',
  #         '--quiet',
  #         '--tries=1',
  #         '--spider',
  #         'http://localhost:5020/health'
  #       ]
  #     interval: 10s
  #     retries: 5
  #     start_period: 30s
  #     timeout: 10s
  #   volumes:
  #     - .:/usr/app
  #   networks:
  #     - backend

  # # Notification service
  # notification_service:
  #   container_name: notification_service
  #   build: .
  #   command: sh -c "npm run start:dev notification"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #       restart: true
  #     route_service:
  #       condition: service_healthy
  #       restart: true
  #   ports:
  #     - ${NOTIFICATION_PORT}:${NOTIFICATION_PORT}
  #   healthcheck:
  #     test:
  #       [
  #         'CMD',
  #         'wget',
  #         '--quiet',
  #         '--tries=1',
  #         '--spider',
  #         'http://localhost:5030/health'
  #       ]
  #     interval: 10s
  #     retries: 5
  #     start_period: 30s
  #     timeout: 10s
  #   volumes:
  #     - .:/usr/app
  #   networks:
  #     - backend

  # gateway:
  #   container_name: gateway
  #   build: .
  #   command: sh -c "npm run start:dev"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #       restart: true
  #     auth_service:
  #       condition: service_healthy
  #       restart: true
  #     route_service:
  #       condition: service_healthy
  #       restart: true
  #     notification_service:
  #       condition: service_healthy
  #       restart: true
  #   ports:
  #     - ${GATEWAY_PORT}:${GATEWAY_PORT}
  #   volumes:
  #     - .:/usr/app
  #   networks:
  #     - backend

volumes:
  postgresdb: {}
  # .: {}
  zookeeper_data:
  kafka_data:


networks:
  backend:

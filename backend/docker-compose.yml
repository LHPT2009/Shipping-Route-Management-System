version: '3.8'

name: backend

services:    
  postgres:
    container_name: postgres
    # image: postgres:alpine
    image: postgres:16-alpine
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./docker-utils:/docker-entrypoint-initdb.d
      - ./postgresdb:/var/lib/postgresql/data
    ports:
      - 5432:${POSTGRES_PORT}
    restart: always
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - backend

  redis:
    container_name: redis
    image: redis
    command: /bin/sh -c "redis-server"
    env_file:
      - .env
    ports:
      - 6379:6379

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    healthcheck:
      test: "echo ruok | nc localhost 2181 | grep imok"
      interval: 5s
      retries: 5
      start_period: 5s
    networks:
      - backend

  kafka:
      image: wurstmeister/kafka
      container_name: kafka
      ports:
        - "9092:9092"
      environment:
        KAFKA_ADVERTISED_HOST_NAME: localhost
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      depends_on:
        zookeeper:
          condition: service_healthy
      entrypoint: ["/bin/sh", "-c", "start-kafka.sh && sleep 5"]
      networks:
        - backend

  # # Auth service
  # auth_service:
  #   container_name: auth_service
  #   build: .
  #   command: sh -c "npm run start:dev auth"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #       restart: true
  #     # kafka:
  #     #   condition: service_healthy
  #     #   restart: true
  #   ports:
  #     - ${AUTH_PORT}:${AUTH_PORT}
  #     - 50051:50051
  #   healthcheck:
  #     test:
  #       [
  #         'CMD',
  #         'wget',
  #         '--quiet',
  #         '--tries=1',
  #         '--spider',
  #         'http://localhost:5010/health'
  #       ]
  #     interval: 10s
  #     retries: 5
  #     start_period: 30s
  #     timeout: 10s
  #   volumes:
  #     - .:/usr/app
  #   networks:
  #     - backend

  # # Route service
  # route_service:
  #   container_name: route_service
  #   build: .
  #   command: sh -c "npm run start:dev route"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #       restart: true
  #     auth_service:
  #       condition: service_healthy
  #       restart: true
  #   ports:
  #     - ${ROUTE_PORT}:${ROUTE_PORT}
  #   healthcheck:
  #     test:
  #       [
  #         'CMD',
  #         'wget',
  #         '--quiet',
  #         '--tries=1',
  #         '--spider',
  #         'http://localhost:5020/health'
  #       ]
  #     interval: 10s
  #     retries: 5
  #     start_period: 30s
  #     timeout: 10s
  #   volumes:
  #     - .:/usr/app
  #   networks:
  #     - backend

  # # Notification service
  # notification_service:
  #   container_name: notification_service
  #   build: .
  #   command: sh -c "npm run start:dev notification"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #       restart: true
  #     route_service:
  #       condition: service_healthy
  #       restart: true
  #   ports:
  #     - ${NOTIFICATION_PORT}:${NOTIFICATION_PORT}
  #   healthcheck:
  #     test:
  #       [
  #         'CMD',
  #         'wget',
  #         '--quiet',
  #         '--tries=1',
  #         '--spider',
  #         'http://localhost:5030/health'
  #       ]
  #     interval: 10s
  #     retries: 5
  #     start_period: 30s
  #     timeout: 10s
  #   volumes:
  #     - .:/usr/app
  #   networks:
  #     - backend

  # gateway:
  #   container_name: gateway
  #   build: .
  #   command: sh -c "npm run start:dev"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #       restart: true
  #     auth_service:
  #       condition: service_healthy
  #       restart: true
  #     route_service:
  #       condition: service_healthy
  #       restart: true
  #     notification_service:
  #       condition: service_healthy
  #       restart: true
  #   ports:
  #     - ${GATEWAY_PORT}:${GATEWAY_PORT}
  #   volumes:
  #     - .:/usr/app
  #   networks:
  #     - backend

volumes:
  postgresdb: {}
  .: {}

networks:
  backend:
